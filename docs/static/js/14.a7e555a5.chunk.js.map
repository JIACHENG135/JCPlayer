{"version":3,"sources":["logged_in/components/subscription/stripe/StripeTextField.js","logged_in/components/subscription/stripe/StripeCardForm.js","logged_in/components/subscription/stripe/StripeIBANForm.js","logged_in/components/subscription/AddBalanceDialog.js","shared/components/ColoredButton.js","shared/components/DialogTitleWithCloseIcon.js","shared/components/FormDialog.js"],"names":["MyInputComponent","props","Component","component","inputRef","other","React","useImperativeHandle","focus","withTheme","stripeOptions","StripeElement","theme","select","rest","options","style","base","typography","body1","color","palette","text","primary","fontSize","fontSmoothing","secondary","invalid","iconColor","error","main","TextField","InputLabelProps","shrink","inputProps","InputProps","inputComponent","StripeCardForm","stripeError","setStripeError","amount","amountError","onAmountChange","name","setName","Grid","container","spacing","justify","item","xs","variant","margin","required","label","value","onChange","event","target","fullWidth","autoFocus","autoComplete","type","parseInt","helperText","startAdornment","InputAdornment","position","CardElement","StripeIBANForm","email","setEmail","IbanElement","supportedCountries","stripePromise","loadStripe","paymentOptions","AddBalanceDialog","open","onClose","onSuccess","useState","loading","setLoading","paymentOption","setPaymentOption","setAmount","setAmountError","elements","useElements","stripe","useStripe","getStripePaymentInfo","card","getElement","billing_details","sepa_debit","Error","FormDialog","headline","hideBackdrop","onFormSubmit","a","preventDefault","createPaymentMethod","message","content","Box","pb","mb","map","option","key","ColoredButton","disableElevation","onClick","common","black","HighlightedInformation","renderPaymentComponent","actions","Button","size","disabled","ButtonCircularProgress","Wrapper","memo","children","buttonTheme","createMuiTheme","buttonProps","paddingBottom","title","disablePadding","DialogTitle","paddingLeft","paddingRight","paddingTop","width","disableTypography","display","justifyContent","Typography","IconButton","marginRight","marginTop","aria-label","withStyles","dialogPaper","flexDirection","alignItems","maxWidth","dialogPaperScrollPaper","maxHeight","dialogContent","classes","Dialog","disableBackdropClick","disableEscapeKeyDown","paper","paperScrollPaper","DialogContent","className","onSubmit"],"mappings":"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","file":"static/js/14.a7e555a5.chunk.js","sourcesContent":["import React from \"react\";\nimport { TextField, withTheme } from \"@material-ui/core\";\n\nfunction MyInputComponent(props) {\n  const { component: Component, inputRef, ...other } = props;\n\n  // implement `InputElement` interface\n  React.useImperativeHandle(inputRef, () => ({\n    focus: () => {\n      // logic to focus the rendered component from 3rd party belongs here\n    }\n    // hiding the value e.g. react-stripe-elements\n  }));\n\n  // `Component` will be your `SomeThirdPartyComponent` from below\n  return <Component {...other} />;\n}\n\nfunction StripeTextField(props) {\n  const { stripeOptions, StripeElement, select, theme, ...rest } = props;\n  const options = {\n    style: {\n      base: {\n        ...theme.typography.body1,\n        color: theme.palette.text.primary,\n        fontSize: \"16px\",\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: theme.palette.text.secondary\n        }\n      },\n      invalid: {\n        iconColor: theme.palette.error.main,\n        color: theme.palette.error.main\n      }\n    },\n    ...stripeOptions\n  };\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true\n      }}\n      inputProps={{ component: StripeElement, options: options }}\n      InputProps={{\n        inputComponent: MyInputComponent\n      }}\n      {...rest}\n    />\n  );\n}\n\nexport default withTheme(StripeTextField);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport StripeTextField from \"./StripeTextField\";\n\nfunction StripeCardForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          fullWidth\n          label=\"Credit Card\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          variant=\"outlined\"\n          required\n          StripeElement={CardElement}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeCardForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default StripeCardForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport StripeTextField from \"./StripeTextField\";\nimport { IbanElement } from \"@stripe/react-stripe-js\";\n\nfunction StripeIBANForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName,\n    email,\n    setEmail\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          required\n          variant=\"outlined\"\n          fullWidth\n          value={email}\n          onChange={event => {\n            setEmail(event.target.value);\n          }}\n          type=\"email\"\n          margin=\"none\"\n          label=\"Email\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          variant=\"outlined\"\n          fullWidth\n          label=\"IBAN\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          required\n          StripeElement={IbanElement}\n          stripeOptions={{ supportedCountries: [\"SEPA\"] }}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeIBANForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  setEmail: PropTypes.func.isRequired\n};\n\nexport default StripeIBANForm;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  IbanElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box, withTheme } from \"@material-ui/core\";\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\n\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\n\nconst AddBalanceDialog = withTheme(function (props) {\n  const { open, theme, onClose, onSuccess } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n    if (amountError) {\n      setAmountError(\"\");\n    }\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\": {\n        return {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: { name: name }\n        };\n      }\n      case \"SEPA Direct Debit\": {\n        return {\n          type: \"sepa_debit\",\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: { email: email, name: name }\n        };\n      }\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeCardForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                name={name}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the credit card number{\" \"}\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      case \"SEPA Direct Debit\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeIbanForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                setEmail={setEmail}\n                name={name}\n                email={email}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the IBAN\n              <br />\n              <b>DE89370400440532013000</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  return (\n    <FormDialog\n      open={open}\n      onClose={onClose}\n      headline=\"Add Balance\"\n      hideBackdrop={false}\n      loading={loading}\n      onFormSubmit={async event => {\n        event.preventDefault();\n        if (amount <= 0) {\n          setAmountError(\"Can't be zero\");\n          return;\n        }\n        if (stripeError) {\n          setStripeError(\"\");\n        }\n        setLoading(true);\n        const { error } = await stripe.createPaymentMethod(\n          getStripePaymentInfo()\n        );\n        if (error) {\n          setStripeError(error.message);\n          setLoading(false);\n          return;\n        }\n        onSuccess();\n      }}\n      content={\n        <Box pb={2}>\n          <Box mb={2}>\n            <Grid container spacing={1}>\n              {paymentOptions.map(option => (\n                <Grid item key={option}>\n                  <ColoredButton\n                    variant={\n                      option === paymentOption ? \"contained\" : \"outlined\"\n                    }\n                    disableElevation\n                    onClick={() => {\n                      setStripeError(\"\");\n                      setPaymentOption(option);\n                    }}\n                    color={theme.palette.common.black}\n                  >\n                    {option}\n                  </ColoredButton>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n          {renderPaymentComponent()}\n        </Box>\n      }\n      actions={\n        <Fragment>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={loading}\n          >\n            Pay with Stripe {loading && <ButtonCircularProgress />}\n          </Button>\n        </Fragment>\n      }\n    />\n  );\n});\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const { open, onClose, onSuccess } = props;\n  return (\n    <Elements stripe={stripePromise}>\n      {open && (\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\n      )}\n    </Elements>\n  );\n}\n\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default Wrapper;\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  IconButton,\n  DialogTitle,\n  Typography,\n  Box,\n  withTheme\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nfunction DialogTitleWithCloseIcon(props) {\n  const {\n    theme,\n    paddingBottom,\n    onClose,\n    disabled,\n    title,\n    disablePadding\n  } = props;\n  return (\n    <DialogTitle\n      style={{\n        paddingBottom: paddingBottom\n          ? paddingBottom && disablePadding\n            ? 0\n            : paddingBottom\n          : theme.spacing(3),\n        paddingLeft: disablePadding ? 0 : null,\n        paddingRight: disablePadding ? 0 : null,\n        paddingTop: disablePadding ? 0 : theme.spacing(2),\n        width: \"100%\"\n      }}\n      disableTypography\n    >\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h5\">{title}</Typography>\n        <IconButton\n          onClick={onClose}\n          style={{ marginRight: -12, marginTop: -10 }}\n          disabled={disabled}\n          aria-label=\"Close\"\n        >\n          <CloseIcon />\n        </IconButton>\n      </Box>\n    </DialogTitle>\n  );\n}\n\nDialogTitleWithCloseIcon.propTypes = {\n  theme: PropTypes.object,\n  paddingBottom: PropTypes.number,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n  disablePadding: PropTypes.bool\n};\n\nexport default withTheme(DialogTitleWithCloseIcon);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dialog, DialogContent, Box, withStyles } from \"@material-ui/core\";\nimport DialogTitleWithCloseIcon from \"./DialogTitleWithCloseIcon\";\n\nconst styles = theme => ({\n  dialogPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    paddingBottom: theme.spacing(3),\n    maxWidth: 420\n  },\n  actions: {\n    marginTop: theme.spacing(2)\n  },\n  dialogPaperScrollPaper: {\n    maxHeight: \"none\"\n  },\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\n/**\n * A Wrapper around the Dialog component to create centered\n * Login, Register or other Dialogs.\n */\nfunction FormDialog(props) {\n  const {\n    classes,\n    open,\n    onClose,\n    loading,\n    headline,\n    onFormSubmit,\n    content,\n    actions,\n    hideBackdrop\n  } = props;\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      disableBackdropClick={loading}\n      disableEscapeKeyDown={loading}\n      classes={{\n        paper: classes.dialogPaper,\n        paperScrollPaper: classes.dialogPaperScrollPaper\n      }}\n      hideBackdrop={hideBackdrop ? hideBackdrop : false}\n    >\n      <DialogTitleWithCloseIcon\n        title={headline}\n        onClose={onClose}\n        disabled={loading}\n      />\n      <DialogContent className={classes.dialogContent}>\n        <form onSubmit={onFormSubmit}>\n          <div>{content}</div>\n          <Box width=\"100%\" className={classes.actions}>\n            {actions}\n          </Box>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nFormDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  headline: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  content: PropTypes.element.isRequired,\n  actions: PropTypes.element.isRequired,\n  hideBackdrop: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(FormDialog);\n"],"sourceRoot":""}