{"version":3,"sources":["shared/components/CardChart.js"],"names":["labelFormatter","label","format","Date","calculateMin","data","yKey","factor","max","Number","POSITIVE_INFINITY","forEach","element","Math","round","options","withStyles","theme","cardContentInner","marginTop","spacing","withTheme","props","color","title","classes","height","useState","anchorEl","setAnchorEl","selectedOption","setSelectedOption","handleClick","useCallback","event","currentTarget","formatter","value","getSubtitle","Error","processData","seconds","minSeconds","arr","i","length","timestamp","unshift","handleClose","selectOption","isOpen","Boolean","pt","px","pb","display","justifyContent","variant","aria-label","aria-owns","undefined","aria-haspopup","onClick","id","open","onClose","PaperProps","style","maxHeight","width","disableScrollLock","map","option","key","selected","name","className","type","dataKey","domain","hide","stroke","fill","cursor","contentStyle","border","padding","borderRadius","shape","boxShadow","shadows","labelStyle","typography","body1","itemStyle","fontSize","letterSpacing","fontFamily","lineHeight","fontWeight"],"mappings":"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","file":"static/js/19.723584b3.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  Tooltip,\n  ResponsiveContainer,\n  YAxis,\n} from \"recharts\";\nimport format from \"date-fns/format\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  IconButton,\n  Menu,\n  MenuItem,\n  withStyles,\n  Box,\n} from \"@material-ui/core\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\nconst styles = (theme) => ({\n  cardContentInner: {\n    marginTop: theme.spacing(-4),\n  },\n});\n\nfunction labelFormatter(label) {\n  return format(new Date(label * 1000), \"MMMM d, p yyyy\");\n}\n\nfunction calculateMin(data, yKey, factor) {\n  let max = Number.POSITIVE_INFINITY;\n  data.forEach((element) => {\n    if (max > element[yKey]) {\n      max = element[yKey];\n    }\n  });\n  return Math.round(max - max * factor);\n}\n\nconst itemHeight = 216;\nconst options = [\"1 Week\", \"1 Month\", \"6 Months\"];\n\nfunction CardChart(props) {\n  const { color, data, title, classes, theme, height } = props;\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(\"1 Month\");\n\n  const handleClick = useCallback(\n    (event) => {\n      setAnchorEl(event.currentTarget);\n    },\n    [setAnchorEl]\n  );\n\n  const formatter = useCallback(\n    (value) => {\n      return [value, title];\n    },\n    [title]\n  );\n\n  const getSubtitle = useCallback(() => {\n    switch (selectedOption) {\n      case \"1 Week\":\n        return \"Last week\";\n      case \"1 Month\":\n        return \"Last month\";\n      case \"6 Months\":\n        return \"Last 6 months\";\n      default:\n        throw new Error(\"No branch selected in switch-statement\");\n    }\n  }, [selectedOption]);\n\n  const processData = useCallback(() => {\n    let seconds;\n    switch (selectedOption) {\n      case \"1 Week\":\n        seconds = 60 * 60 * 24 * 7;\n        break;\n      case \"1 Month\":\n        seconds = 60 * 60 * 24 * 31;\n        break;\n      case \"6 Months\":\n        seconds = 60 * 60 * 24 * 31 * 6;\n        break;\n      default:\n        throw new Error(\"No branch selected in switch-statement\");\n    }\n    const minSeconds = new Date() / 1000 - seconds;\n    const arr = [];\n    for (let i = 0; i < data.length; i += 1) {\n      if (minSeconds < data[i].timestamp) {\n        arr.unshift(data[i]);\n      }\n    }\n    return arr;\n  }, [data, selectedOption]);\n\n  const handleClose = useCallback(() => {\n    setAnchorEl(null);\n  }, [setAnchorEl]);\n\n  const selectOption = useCallback(\n    (selectedOption) => {\n      setSelectedOption(selectedOption);\n      handleClose();\n    },\n    [setSelectedOption, handleClose]\n  );\n\n  const isOpen = Boolean(anchorEl);\n  return (\n    <Card>\n      <Box pt={2} px={2} pb={4}>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <div>\n            <Typography variant=\"subtitle1\">{title}</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {getSubtitle()}\n            </Typography>\n          </div>\n          <div>\n            <IconButton\n              aria-label=\"More\"\n              aria-owns={isOpen ? \"long-menu\" : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleClick}\n            >\n              <MoreVertIcon />\n            </IconButton>\n            <Menu\n              id=\"long-menu\"\n              anchorEl={anchorEl}\n              open={isOpen}\n              onClose={handleClose}\n              PaperProps={{\n                style: {\n                  maxHeight: itemHeight,\n                  width: 200,\n                },\n              }}\n              disableScrollLock\n            >\n              {options.map((option) => (\n                <MenuItem\n                  key={option}\n                  selected={option === selectedOption}\n                  onClick={() => {\n                    selectOption(option);\n                  }}\n                  name={option}\n                >\n                  {option}\n                </MenuItem>\n              ))}\n            </Menu>\n          </div>\n        </Box>\n      </Box>\n      <CardContent>\n        <Box className={classes.cardContentInner} height={height}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={processData()} type=\"number\">\n              <XAxis\n                dataKey=\"timestamp\"\n                type=\"number\"\n                domain={[\"dataMin\", \"dataMax\"]}\n                hide\n              />\n              <YAxis\n                domain={[calculateMin(data, \"value\", 0.05), \"dataMax\"]}\n                hide\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"value\"\n                stroke={color}\n                fill={color}\n              />\n              <Tooltip\n                labelFormatter={labelFormatter}\n                formatter={formatter}\n                cursor={false}\n                contentStyle={{\n                  border: \"none\",\n                  padding: theme.spacing(1),\n                  borderRadius: theme.shape.borderRadius,\n                  boxShadow: theme.shadows[1],\n                }}\n                labelStyle={theme.typography.body1}\n                itemStyle={{\n                  fontSize: theme.typography.body1.fontSize,\n                  letterSpacing: theme.typography.body1.letterSpacing,\n                  fontFamily: theme.typography.body1.fontFamily,\n                  lineHeight: theme.typography.body1.lineHeight,\n                  fontWeight: theme.typography.body1.fontWeight,\n                }}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n\nCardChart.propTypes = {\n  color: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  height: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CardChart);\n"],"sourceRoot":""}